name: End-to-end tests

on:
  workflow_dispatch:
  # push:
  #   tags:
  #     - "*"
  pull_request:
    branches:
      - "main"
  schedule:
    - cron: '0 21 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  K3D_VERSION: # 'v5.6.3' - optionally pin version
  K3D_CLUSTER_NAME: ${{ github.repository_owner }}-${{ github.event.repository.name }}-runner

jobs:
  e2e:
    strategy:
      fail-fast: false
      matrix:
        mode: [install, upgrade]
        charts: [kubewarden, ../charts]
        exclude:
          - charts: ${{ (github.event_name == 'pull_request') && 'kubewarden' }} # skip helm repository on PRs
          - charts: ${{ (github.event_name == 'schedule' ) && '../charts' }}     # skip local charts on nightly jobs

    # Run schedule workflows only on original repo, not forks
    if: github.event_name != 'schedule' || github.repository_owner == 'kubewarden'

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      if: ${{ matrix.charts == '../charts' }}

    - name: Add kubewardern charts repository
      if: ${{ matrix.charts == 'kubewarden' }}
      run: |
        helm repo add kubewarden https://charts.kubewarden.io
        helm repo update kubewarden

    - uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/kubewarden-end-to-end-tests
        path: e2e-tests
        submodules: 'true'

    - name: "Install kwctl"
      uses: kubewarden/github-actions/kwctl-installer@main
      with:
        KWCTL_VERSION: latest

    - run: sudo npm install -g bats

    - name: "Create k3d cluster"
      run: |
        wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=${{ env.K3D_VERSION }} sudo --preserve-env=TAG bash
        k3d cluster create ${{ env.K3D_CLUSTER_NAME }} --agents 1

    - name: Execute tests
      run: |
        make --directory e2e-tests ${{matrix.mode}} tests audit-scanner-installation.bats
      env:
        CLUSTER_NAME: ${{ env.K3D_CLUSTER_NAME }}
        KUBEWARDEN_CHARTS_LOCATION: ${{ matrix.charts }}

    - name: Clean Up
      if: always()
      run: |
        k3d cluster delete ${{ env.K3D_CLUSTER_NAME }}

#- Manual trigger - main
#- PR run - main
#- Nightly #1 - released
# Nightly #2 - main + latest images
# Tagged - released
